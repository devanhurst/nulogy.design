{
  "componentChunkName": "component---src-templates-markdown-js",
  "path": "/guides/developers",
  "result": {
    "data": {
      "markdownRemark": {
        "html": "<h2>Using NDS in React via components</h2>\n<p>This is the preferred way of interacting with the Nulogy Design System and will let you take advantage of components and NDS styles.</p>\n<h3>Installation</h3>\n<p><code>yarn add @nulogy/components</code></p>\n<h3>Usage</h3>\n<h4>1. Add fonts</h4>\n<p>Add <a href=\"https://fonts.google.com/specimen/IBM+Plex+Sans:300,400,500,600\">IBM Plex Sans</a> and <a href=\"https://fonts.google.com/specimen/IBM+Plex+Sans\">IBM Plex Mono</a> to your application</p>\n<pre><code class=\"language-html\">&#x3C;link\n  href=\"https://fonts.googleapis.com/css?family=IBM+Plex+Sans:300,400,500,600\"\n  rel=\"stylesheet\"\n/>\n&#x3C;link\n  href=\"https://fonts.googleapis.com/css?family=IBM+Plex+Mono\"\n  rel=\"stylesheet\"\n/>\n</code></pre>\n<h4>2. Wrap your appliction in our theme provider</h4>\n<p>Wrap your application in the NDSProvider component to access Nulogy's theme values and add typographic defaults.</p>\n<pre><code class=\"language-js\">import React from \"react\";\nimport { NDSProvider } from \"@nulogy/components\";\n\nclass App extends React.Component {\n  render() {\n    return &#x3C;NDSProvider>// your application&#x3C;/NDSProvider>;\n  }\n}\n</code></pre>\n<p>If your app is localized, you can pass the locale to NDSProvider and all default strings within any NDS components will be translated. For an example and full list of locales see <a href=\"https://nulogy.design/guides/localization\">Localization</a>.</p>\n<h4>3. Import desired components</h4>\n<pre><code class=\"language-js\">import { Button } from \"@nulogy/components\";\n\nconst SomeView = () => &#x3C;Button>Click me&#x3C;/Button>;\n</code></pre>\n<hr>\n<h2>Using NDS in JS via theme</h2>\n<p>If you aren't using React you can't take advantage of the components themselves, but can still access the same theme to build your own components in Nulogy's style.</p>\n<h3>Installation</h3>\n<p><code>yarn add @nulogy/components</code></p>\n<h3>Usage</h3>\n<pre><code class=\"language-js\">import { theme } from \"@nulogy/components\";\n\nconst styles = {\n  color: theme.colors.blue\n};\n</code></pre>\n<h2>Using NDS with CSS or Sass</h2>\n<p>We provide Sass and CSS variables for non-JS applications to still hook into Nulogy's style.</p>\n<h3>Installation</h3>\n<p><code>yarn add @nulogy/tokens</code></p>\n<h3>Usage</h3>\n<h4>With Sass</h4>\n<p><code>@import '/node_modules/@nulogy/tokens/dist/variables.scss';</code></p>\n<p><code>.blue-thing {color: $color_base_blue}</code></p>\n<h4>With CSS Modules</h4>\n<p>In your component's jsx file, add <code>import \"@nulogy/tokens/dist/variables.css\";</code></p>\n<p><code>.blue-thing {color: var(--color-base-blue)}</code></p>\n<p>If you have any questions, let us know in <a href=\"slack://channel?team=T024N2KKA&#x26;id=CBAFQ4X7X?\">#design-system</a> or stop by the Design room on the 13th floor.</p>",
        "frontmatter": {
          "intro": "There are multiple ways to take advantage of the Nulogy Design System, depending on your technology stack: using the React components, using the Javascript theme, and using CSS variables  ",
          "path": "/guides/developers",
          "title": "Developing with NDS"
        }
      }
    },
    "pageContext": {}
  },
  "staticQueryHashes": []
}
