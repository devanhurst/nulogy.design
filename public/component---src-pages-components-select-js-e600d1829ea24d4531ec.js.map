{"version":3,"sources":["webpack:///./src/shared/selectProps.js","webpack:///./src/pages/components/select.js","webpack:///./src/shared/inputProps.js","webpack:///./src/shared/const.js"],"names":["selectProps","name","type","defaultValue","description","inputProps","map","prop","options","value","label","customSelectComponents","keyName","import","propsRows","Indicator","styled","span","borderRadius","background","lineHeight","display","width","height","marginRight","CustomOption","children","props","newChildren","href","labelText","id","className","mb","placeholder","disabled","errorMessage","multiselect","requirementText","helpText","noOptionsMessage","components","Option","menuPosition","columns","dataKey","rows","STORYBOOK_COMPONENT_URL","inputFieldProps","STORYBOOK_URL","STORYBOOK_PAGE_URL"],"mappings":"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","file":"component---src-pages-components-select-js-e600d1829ea24d4531ec.js","sourcesContent":["import inputProps from \"./inputProps\";\n\nconst selectProps = [\n  {\n    name: \"autocomplete\",\n    type: \"Boolean\",\n    defaultValue: \"true\",\n    description: \"Whether or not typing will filter the options list\"\n  },\n  {\n    name: \"options\",\n    type: \"Array\",\n    defaultValue: \"Required\",\n    description:\n      \"The options available to be selected, containing a value and a label\"\n  },\n  {\n    name: \"maxHeight\",\n    type: \"String\",\n    defaultValue: \"256px\",\n    description: \"Max height of the select dropdown menu, content is scrollable\"\n  },\n  {\n    name: \"multiselect\",\n    type: \"Boolean\",\n    defaultValue: \"false\",\n    description: \"Whether or not multiple selections can be made\"\n  },\n  {\n    name: \"value\",\n    type: \"String | Array\",\n    defaultValue: \"undefined\",\n    description: \"Value of input, used when controlling the component\"\n  },\n  {\n    name: \"defaultValue\",\n    type: \"String | Array\",\n    defaultValue: \"\",\n    description: \"Default value of input\"\n  },\n  {\n    name: \"menuIsOpen\",\n    type: \"Boolean\",\n    defaultValue: \"undefined\",\n    description:\n      \"Controls whether the menu is open; If unset, then NDS controls this implicitly instead\"\n  },\n  {\n    name: \"onMenuOpen\",\n    type: \"Function\",\n    defaultValue: \"undefined\",\n    description: \"Event handler for when the menu is opened\"\n  },\n  {\n    name: \"onMenuClose\",\n    type: \"Function\",\n    defaultValue: \"undefined\",\n    description: \"Event handler for when the menu is closed\"\n  },\n  {\n    name: \"onInputChange\",\n    type: \"Function\",\n    defaultValue: \"undefined\",\n    description: \"Event handler for when the value typed into the input changes\"\n  },\n  {\n    name: \"menuPosition\",\n    type: \"string\",\n    defaultValue: \"absolute\",\n    description: \"The CSS position value of the menu. ex: 'fixed'\"\n  },\n  {\n    name: \"components\",\n    type: \"Object<ComponentName: ReactNode>\",\n    defaultValue: \"undefined\",\n    description:\n      \"Pass in an object with the keys of the component you would like to replace\"\n  },\n  {\n    name: \"closeMenuOnSelect\",\n    type: \"Boolean\",\n    defaultValue: \"true\",\n    description: \"Close the select menu when the user selects an option\"\n  },\n  ...inputProps.map(prop => {\n    if (prop.name === \"required\") {\n      return {\n        name: \"required\",\n        type: \"boolean\",\n        defaultValue: \"false\",\n        description:\n          \"adds requirement text and asterisk to the label, NOTE: this does not behave like a required html input that blocks form submission when no value is entered, you must check the value of the select manually when submitting\"\n      };\n    }\n    return prop;\n  })\n];\n\nexport default selectProps;\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport {\n  Box,\n  SectionTitle,\n  SubsectionTitle,\n  Title,\n  Select,\n  Link,\n  ListItem,\n  List,\n  Table,\n  Text,\n  SelectOption\n} from \"@nulogy/components\";\nimport styled from \"styled-components\";\nimport Highlight from \"react-highlight\";\nimport {\n  Layout,\n  Intro,\n  IntroText,\n  DocSection,\n  PropsTable,\n  InlineCode\n} from \"../../components\";\nimport selectProps from \"../../shared/selectProps\";\nimport { STORYBOOK_COMPONENT_URL } from \"../../shared/const\";\n\nconst options = [\n  { value: \"accepted\", label: \"Accepted\" },\n  { value: \"assigned\", label: \"Assigned to a line\" }\n];\n\nconst customSelectComponents = [\n  {\n    keyName: \"Option\",\n    import: \"SelectOption\",\n    description: \"Individual options in the select's dropdown\"\n  },\n  {\n    keyName: \"Control\",\n    import: \"Control\",\n    description: \"Wraps the select field\"\n  },\n  {\n    keyName: \"MultiValue\",\n    import: \"SelectMultiValue\",\n    description: \"The selected options in a muliselect select\"\n  },\n  {\n    keyName: \"ClearIndicator\",\n    import: \"SelectClearIndicator\",\n    description: \"The clear button in the multiselect\"\n  },\n  {\n    keyName: \"SelectContainer\",\n    import: \"SelectContainer\",\n    description: \"The wrapper around the whole field and dropdown\"\n  },\n  {\n    keyName: \"Menu\",\n    import: \"SelectMenu\",\n    description: \"The wrapper around the dropdown options\"\n  },\n  {\n    keyName: \"Input\",\n    import: \"SelectInput\",\n    description: \"The typeable input in the select\"\n  }\n];\n\nconst propsRows = [\n  ...selectProps,\n  {\n    name: \"windowThreshold\",\n    type: \"number\",\n    defaultValue: \"300\",\n    description:\n      \"The number of option at which to use virtualization to improve performance of the select\"\n  }\n];\n\nconst Indicator = styled.span(() => ({\n  borderRadius: \"25%\",\n  background: \"green\",\n  lineHeight: \"0\",\n  display: \"inline-block\",\n  width: \"10px\",\n  height: \"10px\",\n  marginRight: \"5px\"\n}));\nconst CustomOption = ({ children, ...props }) => {\n  const newChildren = (\n    <>\n      <Indicator />\n      {children}\n    </>\n  );\n  return <SelectOption {...props}>{newChildren}</SelectOption>;\n};\n\nexport default () => (\n  <Layout>\n    <Helmet>\n      <title>Select</title>\n    </Helmet>\n    <Intro>\n      <Title>Select</Title>\n      <IntroText>\n        For making one selection from a large list of options.\n      </IntroText>\n      <Text>\n        If you need to fetch options for the select as the interacts with the\n        select, please use the{\" \"}\n        <Link href=\"/components/async-select\">Async Select</Link>.\n      </Text>\n    </Intro>\n    <DocSection>\n      <Select\n        options={options}\n        labelText=\"Inventory status\"\n        id=\"inventory-status\"\n      />\n      <Highlight className=\"js\">\n        {`import { Select } from \"@nulogy/components\";\n\nconst options = [\n  { value: \"accepted\", label: \"Accepted\" },\n  { value: \"assigned\", label: \"Assigned to a line\" },\n];\n\n<Select\n  options={ options }\n  id=\"inventory-status\"\n  labelText=\"Inventory status\"\n/>`}\n      </Highlight>\n    </DocSection>\n    <DocSection>\n      <SectionTitle>Use when</SectionTitle>\n      <List>\n        <ListItem>\n          Users need to choose a single option from a list of mutually exclusive\n          options.\n        </ListItem>\n        <ListItem>\n          There is a large data set that would be impractical for radio buttons\n          or a toggle.\n        </ListItem>\n      </List>\n    </DocSection>\n    <DocSection>\n      <SectionTitle>Variations</SectionTitle>\n      <Box mb=\"x6\">\n        <SubsectionTitle>Disabled</SubsectionTitle>\n        <Select\n          labelText=\"Label\"\n          placeholder=\"Please select inventory status\"\n          options={options}\n          id=\"disabled\"\n          disabled\n        />\n        <Highlight className=\"js\">\n          {`<Select\n  labelText=\"Label\"\n  placeholder=\"Please select inventory status\"\n  options={ options }\n  id=\"disabled\"\n  disabled\n/>`}\n        </Highlight>\n      </Box>\n      <Box mb=\"x6\">\n        <SubsectionTitle>Error</SubsectionTitle>\n        <Select\n          options={options}\n          id=\"error\"\n          errorMessage=\"Please select an inventory status\"\n        />\n        <Highlight className=\"js\">\n          {`<Select\n  options={ options }\n  id=\"error\"\n  errorMessage=\"Please select an inventory status\"\n/>`}\n        </Highlight>\n      </Box>\n      <Box mb=\"x6\">\n        <SubsectionTitle>Multiselect</SubsectionTitle>\n        <Select options={options} id=\"multiselect\" multiselect />\n        <Highlight className=\"js\">\n          {`<Select\n  options={ options }\n  id=\"multiselect\"\n  multiselect\n/>`}\n        </Highlight>\n      </Box>\n      <Box mb=\"x6\">\n        <SubsectionTitle>With all labels</SubsectionTitle>\n        <Select\n          labelText=\"Label\"\n          requirementText=\"(Optional)\"\n          helpText=\"Additional help text\"\n          placeholder=\"Please select inventory status\"\n          options={options}\n          id=\"all-label\"\n        />\n        <Highlight className=\"js\">\n          {`<Select\n  labelText=\"Label\"\n  requirementText=\"(Optional)\"\n  helpText=\"Additional help text\"\n  placeholder=\"Please select inventory status\"\n  options={ options }\n  id=\"all-labels\"\n/>`}\n        </Highlight>\n      </Box>\n    </DocSection>\n\n    <DocSection>\n      <SectionTitle>Props</SectionTitle>\n      <PropsTable propsRows={propsRows} />\n    </DocSection>\n\n    <DocSection>\n      <SubsectionTitle>Replacing Inner Components</SubsectionTitle>\n      <Text mb=\"x2\">\n        Using the <InlineCode>components</InlineCode> prop you can augment the\n        inner components of the select. See the following example of adding a\n        component to each option in the dropdown:\n      </Text>\n      <Select\n        defaultValue={[\"accepted\"]}\n        noOptionsMessage={() => \"No options\"}\n        placeholder=\"Please select inventory status\"\n        options={options}\n        components={{\n          Option: CustomOption\n        }}\n        multiselect\n        labelText=\"Inventory status\"\n        menuPosition=\"fixed\"\n      />\n      <Highlight className=\"js\">\n        {`\nimport { SelectOption } from \"@nulogy/components\";\n        \nconst Indicator = styled.span(() => ({\n            borderRadius: \"25%\",\n            background: \"green\",\n            lineHeight: \"0\",\n            display: \"inline-block\",\n            width: \"10px\",\n            height: \"10px\",\n            marginRight: \"5px\"\n          }));\n\nconst CustomOption = ({ children, ...props }) => {\n        const newChildren = (\n          <>\n            <Indicator />\n            {children}\n          </>\n        );\n        return <SelectOption {...props}>{newChildren}</SelectOption>;\n      };\n  \n    return (\n      <Select\n            defaultValue={[\"accepted\"]}\n            noOptionsMessage={() => \"No options\"}\n            placeholder=\"Please select inventory status\"\n            options={options}\n            components={{\n              Option: CustomOption\n            }}\n            multiselect\n            labelText=\"Inventory status\"\n            menuPosition=\"fixed\"\n          />\n    );`}\n      </Highlight>\n\n      <Table\n        columns={[\n          { label: \"Object Key\", dataKey: \"keyName\" },\n          { label: \"Component Name\", dataKey: \"import\" },\n          { label: \"Description\", dataKey: \"description\" }\n        ]}\n        rows={customSelectComponents}\n      />\n    </DocSection>\n\n    <DocSection>\n      <SectionTitle>Related components</SectionTitle>\n      <List>\n        <ListItem>\n          <Link href=\"/components/form\">Form</Link>\n        </ListItem>\n        <ListItem>\n          <Link href=\"/components/async-select\">Async Select</Link>\n        </ListItem>\n      </List>\n    </DocSection>\n\n    <DocSection>\n      <SectionTitle>Resources</SectionTitle>\n      <List>\n        <ListItem>\n          <Link href={`${STORYBOOK_COMPONENT_URL}select--select`}>\n            View in Storybook\n          </Link>\n        </ListItem>\n      </List>\n    </DocSection>\n  </Layout>\n);\n","export const inputFieldProps = [\n  {\n    name: \"id\",\n    type: \"String\",\n    defaultValue: \"null\",\n    description: \"A unique ID for this input\"\n  },\n  {\n    name: \"name\",\n    type: \"String\",\n    defaultValue: \"undefined\",\n    description: \"A unique name for this input\"\n  },\n  {\n    name: \"disabled\",\n    type: \"Boolean\",\n    defaultValue: \"false\",\n    description: \"Marks the field as disabled and disallows user input\"\n  },\n  {\n    name: \"helpText\",\n    type: \"Node\",\n    defaultValue: \"null\",\n    description:\n      \"Placed below the label to provide assistance on how to fill out a field or the expected format. It can also provide an explanation of why the information is needed and how it will be used.\"\n  },\n  {\n    name: \"labelText\",\n    type: \"String\",\n    defaultValue: \"null\",\n    description: \"Informs users what the corresponding input field is for.\"\n  },\n  {\n    name: \"placeholder\",\n    type: \"String\",\n    defaultValue: \"null\",\n    description:\n      \"A hint to the expected format for the field. Not a replacement for a label.\"\n  },\n  {\n    name: \"required\",\n    type: \"Boolean\",\n    defaultValue: \"false\",\n    description:\n      \"Makes the field require selection before the form will submit.\"\n  },\n  {\n    name: \"requirementText\",\n    type: \"String\",\n    defaultValue: \"null\",\n    description: \"(Optional) or (Required).\"\n  },\n  {\n    name: \"className\",\n    type: \"String\",\n    defaultValue: \"undefined\",\n    description: \"className passed to the wrapper element.\"\n  },\n  {\n    name: \"onChange\",\n    type: \"Function\",\n    defaultValue: \"undefined\",\n    description:\n      \"Change event handler that will be run whenever the value of the input is updated.\"\n  },\n  {\n    name: \"onBlur\",\n    type: \"Function\",\n    defaultValue: \"undefined\",\n    description:\n      \"Change event handler that will be run whenever the input loses focus.\"\n  }\n];\n\nconst inputProps = [\n  ...inputFieldProps,\n  {\n    name: \"errorMessage\",\n    type: \"String\",\n    defaultValue: \"null\",\n    description: \"Displays an error message and applies red style\"\n  },\n  {\n    name: \"errorList\",\n    type: \"Array of Strings\",\n    defaultValue: \"null\",\n    description: \"Displays list of error messages and applies red style\"\n  }\n];\n\nexport default inputProps;\n","export const STORYBOOK_URL = \"https://storybook.nulogy.design/?path=/story/\";\nexport const STORYBOOK_COMPONENT_URL = `${STORYBOOK_URL}components-`;\nexport const STORYBOOK_PAGE_URL = `${STORYBOOK_URL}pages-`;\n"],"sourceRoot":""}