{"version":3,"sources":["webpack:///./src/pages/components/modal.js","webpack:///./src/shared/const.js"],"names":["propsRows","name","type","defaultValue","description","Modal","setAppElement","ModalExample","state","isOpen","openModal","bind","closeModal","this","setState","render","controlledModalButtons","onClick","title","footerContent","onRequestClose","maxWidth","React","Component","className","mb","inline","fontFamily","href","STORYBOOK_COMPONENT_URL","STORYBOOK_URL","STORYBOOK_PAGE_URL"],"mappings":"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","file":"component---src-pages-components-modal-js-1ca222e99e37164eaf84.js","sourcesContent":["/* eslint-disable no-unused-vars, quotes, react/self-closing-comp */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Helmet } from \"react-helmet\";\nimport Highlight from \"react-highlight\";\nimport {\n  Button,\n  ButtonGroup,\n  PrimaryButton,\n  QuietButton,\n  Box,\n  SectionTitle,\n  SubsectionTitle,\n  Title,\n  Link,\n  List,\n  ListItem,\n  Modal,\n  Input,\n  Form,\n  Text\n} from \"@nulogy/components\";\nimport {\n  Layout,\n  Intro,\n  IntroText,\n  DocSection,\n  PropsTable\n} from \"../../components\";\nimport { STORYBOOK_COMPONENT_URL } from \"../../shared/const\";\n\nconst propsRows = [\n  {\n    name: \"isOpen\",\n    type: \"Boolean\",\n    defaultValue: \"true\",\n    description: \"Controls whether the modal is open or closed.\"\n  },\n  {\n    name: \"title\",\n    type: \"String\",\n    defaultValue: \"null\",\n    description: \"The title appearing at the top of the modal.\"\n  },\n  {\n    name: \"onRequestClose\",\n    type: \"Function\",\n    defaultValue: \"null\",\n    description:\n      \"Function that is run when the modal requests to be closed (esc key, clicking outside, clicking close), also renders the close button is passed in.\"\n  },\n  {\n    name: \"footerContent\",\n    type: \"Node\",\n    defaultValue: \"null\",\n    description:\n      \"The content (usually buttons) to appear at the bottom of the modal.\"\n  },\n  {\n    name: \"onAfterOpen\",\n    type: \"Function\",\n    defaultValue: \"null\",\n    description: \"Function that is run after the modal has opened.\"\n  },\n  {\n    name: \"maxWidth\",\n    type: \"String\",\n    defaultValue: \"624px\",\n    description:\n      \"Maximum width of the modal, modal will always compress responsively when the screen shrinks.\"\n  },\n  {\n    name: \"shouldFocusAfterRender\",\n    type: \"Boolean\",\n    defaultValue: \"true\",\n    description: \"Move focus into the modal when it is rendered.\"\n  },\n  {\n    name: \"shouldReturnFocusAfterClose\",\n    type: \"Boolean\",\n    defaultValue: \"true\",\n    description: \"Move focus back to what triggered the modal after it closes.\"\n  },\n  {\n    name: \"ariaLabel\",\n    type: \"String\",\n    defaultValue: \"null\",\n    description:\n      \"String indicating how the modal content should be announced to screenreaders.\"\n  },\n  {\n    name: \"ariaDescribedBy\",\n    type: \"String\",\n    defaultValue: \"null\",\n    description:\n      \"String indicating the aria description of the modal (optional for enhanced accessibility if needed).\"\n  },\n  {\n    name: \"className\",\n    type: \"String\",\n    defaultValue: \"undefined\",\n    description: \"className passed to the modal component.\"\n  },\n  {\n    name: \"portalClassName\",\n    type: \"String\",\n    defaultValue: \"undefined\",\n    description:\n      \"className passed to the portal created for the modal component.\"\n  },\n  {\n    name: \"overlayClassName\",\n    type: \"String\",\n    defaultValue: \"undefined\",\n    description: \"className passed to the overlay component.\"\n  },\n  {\n    name: \"closeAriaLabel\",\n    type: \"String\",\n    defaultValue: \"close\",\n    description: \"Aria label on close button\"\n  }\n];\n\nModal.setAppElement(\"#___gatsby\");\n\nclass ModalExample extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      isOpen: false\n    };\n\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  openModal() {\n    this.setState({ isOpen: true });\n  }\n\n  closeModal() {\n    this.setState({ isOpen: false });\n  }\n\n  render() {\n    const { isOpen } = this.state;\n    const controlledModalButtons = (\n      <ButtonGroup>\n        <PrimaryButton type=\"submit\">Save</PrimaryButton>\n        <QuietButton onClick={this.closeModal}>Cancel</QuietButton>\n      </ButtonGroup>\n    );\n\n    return (\n      <div>\n        <Button onClick={this.openModal}>Open Modal</Button>\n        <Modal\n          title=\"Edit Profile\"\n          footerContent={controlledModalButtons}\n          onRequestClose={this.closeModal}\n          isOpen={isOpen}\n          maxWidth=\"456px\"\n        >\n          Are you sure you'd like to save these settings?\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default () => (\n  <Layout>\n    <Helmet>\n      <title>Modal</title>\n    </Helmet>\n    <Intro>\n      <Title>Modal</Title>\n      <IntroText>\n        Modal is a window that appears on top of the main content and allows the\n        introduction of secondary flows while maintaining the original context.\n      </IntroText>\n    </Intro>\n\n    <DocSection>\n      <ModalExample />\n      <Highlight className=\"js\">\n        {`import {\n  Modal,\n  ButtonGroup,\n  PrimaryButton,\n  QuietButton\n} from \"@nulogy/components\";\n\nModal.setAppElement(\"#root\");\n\nclass ModalExample extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      isOpen: false\n    };\n\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  openModal() {\n    this.setState({ isOpen: true });\n  }\n\n  closeModal() {\n    this.setState({ isOpen: false });\n  }\n\n  render() {\n    const { children } = this.props;\n    const { isOpen } = this.state;\n    const buttons = (\n      <ButtonGroup>\n        <PrimaryButton type=\"submit\" onClick={}>Save</PrimaryButton>\n        <QuietButton onClick={this.closeModal}>Cancel</QuietButton>\n      </ButtonGroup>\n    );\n    return (\n      <div>\n        <Button onClick={this.openModal}>Open Modal</Button>\n        <Modal\n          title=\"Modal Title\"\n          isOpen={isOpen}\n          onRequestClose={closeModal}\n          footerContent={buttons}\n        >\n        Are you sure you'd like to save these settings?\n        </Modal>\n      </div>\n    );\n  }\n}\n`}\n      </Highlight>\n    </DocSection>\n\n    <DocSection>\n      <SectionTitle>Use</SectionTitle>\n      <List>\n        <ListItem>\n          When important warnings require immediate attention.\n        </ListItem>\n        <ListItem>\n          To prevent irreversible changes by creating friction.\n        </ListItem>\n        <ListItem>\n          To fragment a complex workflow into simpler steps such as creating,\n          editing, etc.\n        </ListItem>\n      </List>\n    </DocSection>\n\n    <DocSection>\n      <SectionTitle>Closing the Modal</SectionTitle>\n      <Text mb=\"x2\">\n        To close the modal using the built-in methods, the prop{\" \"}\n        <Text inline fontFamily=\"monospace\">\n          onRequestClose{\" \"}\n        </Text>\n        must be passed in. This prop should be the function that closes the\n        modal. By providing this prop all three methods of closing the modal are\n        enabled together: the close button, clicking outside the modal, and\n        pressing the escape key. If you do not provide the{\" \"}\n        <Text inline fontFamily=\"monospace\">\n          onRequestClose{\" \"}\n        </Text>{\" \"}\n        prop, ensure that there is another way to close the modal, for example a\n        cancel button.\n      </Text>\n    </DocSection>\n\n    <DocSection>\n      <SectionTitle>Accessibility guidelines</SectionTitle>\n      <Text mb=\"x2\">\n        In order to hide the rest of the application to screen-readers when the\n        modal is open, make sure to use{\" \"}\n        <Text inline fontFamily=\"monospace\">\n          Modal.setAppElement(el){\" \"}\n        </Text>{\" \"}\n        where el is the root element of the app. This will set{\" \"}\n        <Text inline fontFamily=\"monospace\">\n          aria-hidden=true{\" \"}\n        </Text>\n        when the modal is open.\n      </Text>\n      <Text>\n        When there is no visible label on the Modal (ie. title prop), you should\n        use the ariaLabel prop to provide a modal label. The aria-labelledby\n        attribute is automatically applied if the title prop is specified. If\n        the modal requires additional description for screen-readers, use the\n        ariaDescribedBy prop.\n      </Text>\n    </DocSection>\n\n    <DocSection>\n      <SectionTitle>Responsive information</SectionTitle>\n      <Text>\n        The Modal component has a width of \"100%\" and a customizable set\n        maxWidth value. The Modal will force maxWidth to 100% when the screen is\n        smaller than the small breakpoint (768px).\n      </Text>\n    </DocSection>\n\n    <DocSection>\n      <SectionTitle>Props</SectionTitle>\n      <PropsTable propsRows={propsRows} />\n    </DocSection>\n\n    <DocSection>\n      <SectionTitle>Related components</SectionTitle>\n      <List>\n        <ListItem>\n          <Link href=\"/components/form\">Form</Link>\n        </ListItem>\n        <ListItem>\n          <Link href=\"/components/buttons\">Buttons</Link>\n        </ListItem>\n      </List>\n    </DocSection>\n\n    <DocSection>\n      <SectionTitle>Resources</SectionTitle>\n      <List>\n        <ListItem>\n          <Link href={`${STORYBOOK_COMPONENT_URL}modal--modal`}>\n            View in Storybook\n          </Link>\n        </ListItem>\n      </List>\n    </DocSection>\n  </Layout>\n);\n","export const STORYBOOK_URL = \"https://storybook.nulogy.design/?path=/story/\";\nexport const STORYBOOK_COMPONENT_URL = `${STORYBOOK_URL}components-`;\nexport const STORYBOOK_PAGE_URL = `${STORYBOOK_URL}pages-`;\n"],"sourceRoot":""}