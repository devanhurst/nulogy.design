{"version":3,"sources":["webpack:///./src/pages/guides/style-props.js"],"names":["columns","label","dataKey","width","cellRenderer","propName","smallTextRenderer","rows","category","props","rowHovers","mt","href","mb"],"mappings":"4FAAA,gFAsBMA,EAAU,CACd,CACEC,MAAO,WACPC,QAAS,WACTC,MAAO,MACPC,aAAcC,KAEhB,CACEJ,MAAO,QACPC,QAAS,QACTC,MAAO,MACPC,aAAcE,MAIZC,EAAO,CACX,CACEC,SAAU,QACVC,MACE,wNAEJ,CACED,SAAU,SACVC,MACE,yFAEJ,CACED,SAAU,aACVC,MACE,qFAEJ,CACED,SAAU,SACVC,MAAO,8BAET,CACED,SAAU,SACVC,MACE,oIAEJ,CACED,SAAU,WACVC,MAAO,+CAII,4BACb,kBAAC,IAAD,KACE,kBAAC,SAAD,KACE,+CAEF,kBAAC,IAAD,KACE,kBAAC,KAAD,oBACA,kBAAC,IAAD,0NAOF,kBAAC,IAAD,KACE,kBAAC,IAAD,wBACA,kBAAC,IAAD,CAAOT,QAASA,EAASO,KAAMA,EAAMG,WAAW,IAChD,kBAAC,IAAD,CAAMC,GAAG,MAAT,uDACuD,IACrD,kBAAC,IAAD,CAAMC,KAAK,4EAAX,sBAFF,MASF,kBAAC,IAAD,KACE,kBAAC,IAAD,cACA,kBAAC,IAAD,mIAIA,kBAAC,IAAD,CAAMC,GAAG,MACP,kBAAC,IAAD,4EACuE,IACrE,kBAAC,IAAD,cAFF,WAIA,kBAAC,IAAD,kEAC6D,IAC3D,kBAAC,IAAD,mBAFF,OAE0C,IACxC,kBAAC,IAAD,eAHF,WAKA,kBAAC,IAAD,wCACkC,kBAAC,IAAD,eADlC,iCAEyB,kBAAC,IAAD,gBAFzB,IAE2D,IACzD,kBAAC,IAAD,gBAHF,QAGwC,IACtC,kBAAC,IAAD,mBAJF,sBAOF,kBAAC,IAAD,CAAOF,GAAG,MAAV,qLAGsC,IACpC,kBAAC,IAAD,CAAMC,KAAK,oBAAX,QAJF,gBAOF,kBAAC,IAAD,KACE,kBAAC,IAAD,cADF,gCAE+B,kBAAC,IAAD,CAAMA,KAAK,UAAX,SAF/B,iDAGkC,kBAAC,IAAD,kBAHlC,MAGwE,IACtE,kBAAC,IAAD,aAJF,yBAIsD,IACpD,kBAAC,IAAD,gBALF","file":"component---src-pages-guides-style-props-js-75a0a7b73af0b79eed82.js","sourcesContent":["import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport {\n  SectionTitle,\n  Alert,\n  Title,\n  Link,\n  List,\n  ListItem,\n  Table\n} from \"@nulogy/components\";\nimport {\n  DocText as Text,\n  Layout,\n  Intro,\n  IntroText,\n  DocSection,\n  InlineCode\n} from \"../../components\";\n\nimport { propName, smallTextRenderer } from \"../../components/PropsTable\";\n\nconst columns = [\n  {\n    label: \"Category\",\n    dataKey: \"category\",\n    width: \"20%\",\n    cellRenderer: propName\n  },\n  {\n    label: \"Props\",\n    dataKey: \"props\",\n    width: \"80%\",\n    cellRenderer: smallTextRenderer\n  }\n];\n\nconst rows = [\n  {\n    category: \"space\",\n    props:\n      \"margin, marginTop, marginRight, marginBottom, marginLeft, marginX, marginY, padding, paddingTop, paddingRight, paddingBottom, paddingLeft, paddingX, paddingY, m, mt, mr, mb, ml, mx, my, p, pt, pr, pb, pl, px, py,\"\n  },\n  {\n    category: \"layout\",\n    props:\n      \"width, height, minWidth, minHeight, maxWidth, maxHeight, display, verticalAlign, size\"\n  },\n  {\n    category: \"typography\",\n    props:\n      \"fontFamily, fontSize, fontWeight, lineHeight, letterSpacing, fontStyle, textAlign\"\n  },\n  {\n    category: \"colour\",\n    props: \"color, backgroundColor, bg\"\n  },\n  {\n    category: \"border\",\n    props:\n      \"border, borderWidth, borderStyle, borderColor, borderRadius, borderTop, borderRight, borderBottom, borderLeft, borderX, borderY,\"\n  },\n  {\n    category: \"position\",\n    props: \"position, zIndex, top, right, bottom, left\"\n  }\n];\n\nexport default () => (\n  <Layout>\n    <Helmet>\n      <title>Style props</title>\n    </Helmet>\n    <Intro>\n      <Title>Style props</Title>\n      <IntroText>\n        Nulogy's components use styled-system to apply groups of style props to\n        different types of components. These props correspond to their css\n        equivalents and allow individual manipulation of a component's style.\n      </IntroText>\n    </Intro>\n\n    <DocSection>\n      <SectionTitle>Prop Categories</SectionTitle>\n      <Table columns={columns} rows={rows} rowHovers={false} />\n      <Text mt=\"x3\">\n        For more information on each of these props, see the{\" \"}\n        <Link href=\"https://github.com/styled-system/styled-system/blob/master/docs/table.md\">\n          styled-system docs\n        </Link>\n        .\n      </Text>\n    </DocSection>\n\n    <DocSection>\n      <SectionTitle>Usage</SectionTitle>\n      <Text>\n        To see which props each component includes, see that component's\n        documentation. But in general, the following rules apply:\n      </Text>\n      <List mb=\"x3\">\n        <ListItem>\n          Block-level components (Alerts, Buttons, Cards, etc.) have access to{\" \"}\n          <InlineCode>space</InlineCode> props.\n        </ListItem>\n        <ListItem>\n          Text components (Text, Headings, Link) also have access to{\" \"}\n          <InlineCode>typography</InlineCode> and{\" \"}\n          <InlineCode>colour</InlineCode> props.\n        </ListItem>\n        <ListItem>\n          The Box component has access to <InlineCode>layout</InlineCode> props\n          and can be used to add <InlineCode>borders</InlineCode>,{\" \"}\n          <InlineCode>colours</InlineCode>, and{\" \"}\n          <InlineCode>boxShadows</InlineCode> around anything.\n        </ListItem>\n      </List>\n      <Alert mt=\"x3\">\n        Note that inputs don't have access to any of these props because they're\n        already pre-composed. To stack multiple inputs with proper spacing on\n        top of each other, wrap them in the{\" \"}\n        <Link href=\"/components/form\">Form</Link> component.\n      </Alert>\n    </DocSection>\n    <DocSection>\n      <SectionTitle>Theme</SectionTitle>\n      Styled-system will check the <Link href=\"/theme\">theme</Link> and use that\n      if a key matches, e.g setting a <InlineCode>textColor</InlineCode> to{\" \"}\n      <InlineCode>blue</InlineCode> will display Nulogy's{\" \"}\n      <InlineCode>#216beb</InlineCode>, instead of the html default. If a key\n      can't be found, it will be processed as a CSS value.\n    </DocSection>\n  </Layout>\n);\n"],"sourceRoot":""}