{"version":3,"sources":["webpack:///./src/shared/selectProps.js","webpack:///./node_modules/gatsby/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","webpack:///./src/pages/components/async-select.js","webpack:///./src/shared/inputProps.js"],"names":["selectProps","name","type","defaultValue","description","inputProps","map","prop","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","loadMatchingCountries","fn","inputValue","data","fetch","json","label","self","this","args","arguments","apply","err","undefined","propsRows","Helmet","loadOptions","labelText","className","href","STORYBOOK_COMPONENT_URL","inputFieldProps"],"mappings":"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","file":"component---src-pages-components-async-select-js-af8d06c753b71d24fbe0.js","sourcesContent":["import inputProps from \"./inputProps\";\n\nconst selectProps = [\n  {\n    name: \"autocomplete\",\n    type: \"Boolean\",\n    defaultValue: \"true\",\n    description: \"Whether or not typing will filter the options list\"\n  },\n  {\n    name: \"options\",\n    type: \"Array\",\n    defaultValue: \"Required\",\n    description:\n      \"The options available to be selected, containing a value and a label\"\n  },\n  {\n    name: \"maxHeight\",\n    type: \"String\",\n    defaultValue: \"256px\",\n    description: \"Max height of the select dropdown menu, content is scrollable\"\n  },\n  {\n    name: \"multiselect\",\n    type: \"Boolean\",\n    defaultValue: \"false\",\n    description: \"Whether or not multiple selections can be made\"\n  },\n  {\n    name: \"value\",\n    type: \"String | Array\",\n    defaultValue: \"undefined\",\n    description: \"Value of input, used when controlling the component\"\n  },\n  {\n    name: \"defaultValue\",\n    type: \"String | Array\",\n    defaultValue: \"\",\n    description: \"Default value of input\"\n  },\n  {\n    name: \"menuIsOpen\",\n    type: \"Boolean\",\n    defaultValue: \"undefined\",\n    description:\n      \"Controls whether the menu is open; If unset, then NDS controls this implicitly instead\"\n  },\n  {\n    name: \"onMenuOpen\",\n    type: \"Function\",\n    defaultValue: \"undefined\",\n    description: \"Event handler for when the menu is opened\"\n  },\n  {\n    name: \"onMenuClose\",\n    type: \"Function\",\n    defaultValue: \"undefined\",\n    description: \"Event handler for when the menu is closed\"\n  },\n  {\n    name: \"onInputChange\",\n    type: \"Function\",\n    defaultValue: \"undefined\",\n    description: \"Event handler for when the value typed into the input changes\"\n  },\n  {\n    name: \"menuPosition\",\n    type: \"string\",\n    defaultValue: \"absolute\",\n    description: \"The CSS position value of the menu. ex: 'fixed'\"\n  },\n  {\n    name: \"components\",\n    type: \"Object<ComponentName: ReactNode>\",\n    defaultValue: \"undefined\",\n    description:\n      \"Pass in an object with the keys of the component you would like to replace\"\n  },\n  {\n    name: \"noOptionsMessage\",\n    type: \"({ inputValue: string }) => string | null \",\n    defaultValue: \"No options\",\n    description:\n      \"A function that returns the string you you like to show up when no options are available\"\n  },\n  {\n    name: \"closeMenuOnSelect\",\n    type: \"Boolean\",\n    defaultValue: \"true\",\n    description: \"Close the select menu when the user selects an option\"\n  },\n  ...inputProps.map(prop => {\n    if (prop.name === \"required\") {\n      return {\n        name: \"required\",\n        type: \"boolean\",\n        defaultValue: \"false\",\n        description:\n          \"adds requirement text and asterisk to the label, NOTE: this does not behave like a required html input that blocks form submission when no value is entered, you must check the value of the select manually when submitting\"\n      };\n    }\n    return prop;\n  })\n];\n\nexport default selectProps;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport {\n  SectionTitle,\n  Title,\n  AsyncSelect,\n  Link,\n  ListItem,\n  List,\n  Text\n} from \"@nulogy/components\";\nimport Highlight from \"react-highlight\";\nimport {\n  Layout,\n  Intro,\n  IntroText,\n  DocSection,\n  PropsTable\n} from \"../../components\";\nimport selectProps from \"../../shared/selectProps\";\nimport { STORYBOOK_COMPONENT_URL } from \"../../shared/const\";\n\nconst loadMatchingCountries = async inputValue => {\n  const data = await fetch(\n    `https://restcountries.eu/rest/v2/name/${inputValue}`\n  );\n  const results = await data.json();\n  return results.map(({ name }) => ({\n    label: name,\n    value: name\n  }));\n};\n\nconst propsRows = [\n  {\n    name: \"loadOptions\",\n    type: \"(inputValue: string) => ({label: string, value: string })\",\n    description:\n      \"Event handler that is called when the input changes and should return a list of objects with the label and value of the fetched select options\"\n  },\n  {\n    name: \"defaultOptions\",\n    type: \"boolean || Array<{label: string, value: string}>\",\n    description:\n      \"if true will fetch results when the input is focussed and display them, otherwise you can pass in a list of label and value objects to display until the user types\"\n  },\n  {\n    name: \"cacheOptions\",\n    type: \"boolean\",\n    defaultValue: \"false\",\n    description:\n      \"If cacheOptions is truthy, then the loaded data will be cached. The cache will remain until cacheOptions changes value.\"\n  },\n  ...selectProps\n];\n\nexport default () => (\n  <Layout>\n    <Helmet>\n      <title>Async Select</title>\n    </Helmet>\n    <Intro>\n      <Title>Async Select</Title>\n      <IntroText>\n        For making one selection from a large list of options and fetching new\n        options as the user types.\n      </IntroText>\n    </Intro>\n    <DocSection>\n      <AsyncSelect loadOptions={loadMatchingCountries} labelText=\"Country\" />\n      <Highlight className=\"js\">\n        {`import { AsyncSelect } from \"@nulogy/components\";\n\nconst loadMatchingCountries = async inputValue => {\n  const data = await fetch('https://restcountries.eu/rest/v2/name/inputValue');\n  const results = await data.json();\n  return results.map(({ name }) => ({\n    label: name,\n    value: name\n  }));\n};\n\n<AsyncSelect\n  loadOptions={loadMatchingCountries}\n  labelText=\"Country\"\n/>`}\n      </Highlight>\n    </DocSection>\n    <DocSection>\n      <SectionTitle>Variations</SectionTitle>\n      <Text>\n        All variations from the <Link href=\"/components/select\">Select</Link>{\" \"}\n        component are available.{\" \"}\n      </Text>\n    </DocSection>\n\n    <DocSection>\n      <SectionTitle>Props</SectionTitle>\n      <PropsTable propsRows={propsRows} />\n    </DocSection>\n\n    <DocSection>\n      <SectionTitle>Related components</SectionTitle>\n      <List>\n        <ListItem>\n          <Link href=\"/components/form\">Form</Link>\n        </ListItem>\n        <ListItem>\n          <Link href=\"/components/select\">Select</Link>\n        </ListItem>\n      </List>\n    </DocSection>\n\n    <DocSection>\n      <SectionTitle>Resources</SectionTitle>\n      <List>\n        <ListItem>\n          <Link href={`${STORYBOOK_COMPONENT_URL}asyncselect--default`}>\n            View in Storybook\n          </Link>\n        </ListItem>\n      </List>\n    </DocSection>\n  </Layout>\n);\n","export const inputFieldProps = [\n  {\n    name: \"id\",\n    type: \"String\",\n    defaultValue: \"null\",\n    description: \"A unique ID for this input\"\n  },\n  {\n    name: \"name\",\n    type: \"String\",\n    defaultValue: \"undefined\",\n    description: \"A unique name for this input\"\n  },\n  {\n    name: \"disabled\",\n    type: \"Boolean\",\n    defaultValue: \"false\",\n    description: \"Marks the field as disabled and disallows user input\"\n  },\n  {\n    name: \"helpText\",\n    type: \"Node\",\n    defaultValue: \"null\",\n    description:\n      \"Placed below the label to provide assistance on how to fill out a field or the expected format. It can also provide an explanation of why the information is needed and how it will be used.\"\n  },\n  {\n    name: \"labelText\",\n    type: \"String\",\n    defaultValue: \"null\",\n    description: \"Informs users what the corresponding input field is for.\"\n  },\n  {\n    name: \"placeholder\",\n    type: \"String\",\n    defaultValue: \"null\",\n    description:\n      \"A hint to the expected format for the field. Not a replacement for a label.\"\n  },\n  {\n    name: \"required\",\n    type: \"Boolean\",\n    defaultValue: \"false\",\n    description:\n      \"Makes the field require selection before the form will submit.\"\n  },\n  {\n    name: \"requirementText\",\n    type: \"String\",\n    defaultValue: \"null\",\n    description: \"(Optional) or (Required).\"\n  },\n  {\n    name: \"className\",\n    type: \"String\",\n    defaultValue: \"undefined\",\n    description: \"className passed to the wrapper element.\"\n  },\n  {\n    name: \"onChange\",\n    type: \"Function\",\n    defaultValue: \"undefined\",\n    description:\n      \"Change event handler that will be run whenever the value of the input is updated.\"\n  },\n  {\n    name: \"onBlur\",\n    type: \"Function\",\n    defaultValue: \"undefined\",\n    description:\n      \"Change event handler that will be run whenever the input loses focus.\"\n  }\n];\n\nconst inputProps = [\n  ...inputFieldProps,\n  {\n    name: \"errorMessage\",\n    type: \"String\",\n    defaultValue: \"null\",\n    description: \"Displays an error message and applies red style\"\n  },\n  {\n    name: \"errorList\",\n    type: \"Array of Strings\",\n    defaultValue: \"null\",\n    description: \"Displays list of error messages and applies red style\"\n  }\n];\n\nexport default inputProps;\n"],"sourceRoot":""}